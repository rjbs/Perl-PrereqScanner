#!/usr/bin/perl
package Perl::PrereqScanner::App;
# ABSTRACT: scan your working dir for likely prereqs

use strict;
use warnings;

use File::Find;
use File::Spec::Functions qw{ catdir updir };
use FindBin qw{ $Bin };
use lib catdir( $Bin, updir, 'lib' );

use List::Util qw{ max };
use Perl::PrereqScanner;
use CPAN::Meta::Requirements ();

#######
# Options and Menu
#######
use Getopt::Long;
Getopt::Long::Configure('bundling');
use Pod::Usage;
my $help;
my $combine = 0;
GetOptions(
	'combine!' => \$combine,
	'help|h|?' => \$help,
) or pod2usage(2);
pod2usage(1) if $help;

# ToDo add help for explict --no-combine

#######

my $combined = $combine && CPAN::Meta::Requirements->new;

foreach my $file ( @ARGV ? @ARGV : '.' ) {
    -d $file ? scan_dir( $file ) : scan_file( $file );
}

sub scan_dir {
    find( {
        no_chdir => 1, 
        wanted => sub { scan_file($_) if /\.(pl|pm|psgi|t)$/; }
    }, shift );
}

sub scan_file {
    my $file = shift;
    my $prereqs = Perl::PrereqScanner->new->scan_file($file);
    if( $combine ){
        $combined->add_requirements($prereqs);
    }
    else {
        print "* $file\n";
        print_prereqs($prereqs);
    }
}

if( $combine ){
    print_prereqs($combined);
}

sub print_prereqs {
    my $prereqs = shift->as_string_hash;
    my $max = max map { length } keys %$prereqs;
    printf( "%-${max}s = %s\n", $_, $prereqs->{$_} )
        for sort keys %$prereqs;
}

exit;

=head1 SYNOPSIS

    scan_prereqs [--combine] [DIRS|FILES]

Directories are traversed with L<File::Find> to collect all C<.pl>, C<.pm>,
C<.psgi> and C<.t> files. If no directories or files are specified, the current
working directory is scanned.

=cut
